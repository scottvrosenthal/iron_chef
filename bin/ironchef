#!/usr/bin/env ruby

require 'optparse'
require 'fileutils'

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [project-name-devops]"

  opts.on("-h", "--help", "Displays this help info") do
    puts opts
    exit 0
  end

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end


if ARGV.empty?
  abort "Please specify the DevOps project directory , e.g. '#{File.basename($0)}-devops'"
elsif ARGV.length > 1
  abort "Too many arguments; please specify only the DevOps project directory."
end

def unindent(string)
  indentation = string[/\A\s*/]
  string.strip.gsub(/^#{indentation}/, "")
end

base = ARGV.shift

FileUtils.mkdir_p(base)

FileUtils.mkdir_p("#{base}/environments")
FileUtils.mkdir_p("#{base}/nodes")
FileUtils.mkdir_p("#{base}/data_bags/environments")

files = {
  ".gitignore" => unindent(<<-FILE),
    /cookbooks
    /tmp
    
  FILE
  
  "Gemfile" => unindent(<<-FILE),
    source 'https://rubygems.org'
  
    gem 'iron_chef'
    
  FILE
  
  "Capfile" => unindent(<<-FILE),
    require 'iron_chef'
    load 'config/deploy'
  
  FILE
  
  "config/deploy.rb" => unindent(<<-FILE),
    set :chef_environments, %w(staging production)

    # don't forget to run locally
    # chmod 600 /your-full/local-path-to-ssh-key/xxxxx_keypair_ec2.pem
    # ssh-add /your-full/local-path-to-ssh-key/xxxxx_keypair_ec2.pem

    ssh_options[:keys] = File.expand_path('~/your-local-path-to-ssh-key/xxxxx_keypair_ec2.pem')
    default_run_options[:pty] = true

    # set :user, 'root'
    set :user, 'ec2-user'
    set :use_sudo, false

  FILE

  "roles/install_server.rb" => unindent(<<-FILE),
    name "install_server"
    description "Install Server Role"
    # run_list
    # default_attributes
  FILE

  "roles/setup_server.rb" => unindent(<<-FILE),
    name "setup_server"
    description "Setup Server Role"
    # run_list
    # default_attributes
  FILE

  "cookbooks/.keep" => '',

  "tmp/.keep" => '',

  "site-cookbooks/.keep" => '',

  "site-cookbooks/commons/metadata.rb" => '',

  "site-cookbooks/commons/recipes/default.rb" => unindent(<<-FILE),
  # retrieve environment specific data bag item
  env = Chef::DataBagItem.load('environments', node['chef_environment'])
  Chef::Log.info("Loaded environments information from DataBagItem env[\#{env['id']}]")
  Chef::Log.info("Loaded environments information from DataBagItem env[\#{env['description']}]")

  # retrieve global settings specific data bag item
  gs_default = Chef::DataBagItem.load('global_settings', 'default')
  Chef::Log.info("Loaded global settings information from DataBagItem gs_default[\#{gs_default['id']}]")
  Chef::Log.info("Loaded global settings information from DataBagItem gs_default[\#{gs_default['description']}]")
  FILE

  "site-cookbooks/commons/attributes/default.rb" => '',

  "site-cookbooks/commons/files/default/.keep" => '',

  "site-cookbooks/commons/templates/default/.keep" => '',

  "data_bags/global_settings/default.json" => "{\n\"id\": \"default\",\n\"description\": \"global settings default data bag item\"\n}",

  "README.md" => "\# #{base}"
}

files.each do |file, content|
  file = File.join(base, file)
  if File.exists?(file)
    warn "[skip] '#{file}' already exists"
  elsif File.exists?(file.downcase)
    warn "[skip] '#{file.downcase}' exists, which could conflict with `#{file}'"
  else
    unless File.exists?(File.dirname(file))
      puts "[add] making directory '#{File.dirname(file)}'"
      FileUtils.mkdir_p(File.dirname(file))
    end
    puts "[add] writing '#{file}'"
    File.open(file, "w") { |f| f.write(content) }
  end
end

Dir.chdir(base) do
  puts   'Installing gem dependencies'
  system 'bundle'

  system 'cap env:prepare'

  puts "Created Iron Chef DevOps project '#{base}'"

end
