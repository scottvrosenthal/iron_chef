#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'fileutils'

OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename($0)} [devops_project_name]"

  opts.on("-h", "--help", "Displays this help info") do
    puts opts
    exit 0
  end

  begin
    opts.parse!(ARGV)
  rescue OptionParser::ParseError => e
    warn e.message
    puts opts
    exit 1
  end
end


if ARGV.empty?
  abort "Please specify the devops project directory , e.g. '#{File.basename($0)}-devops'"
elsif ARGV.length > 1
  abort "Too many arguments; please specify only the devops project directory."
end

def unindent(string)
  indentation = string[/\A\s*/]
  string.strip.gsub(/^#{indentation}/, "")
end

base = ARGV.shift

files = {
  ".gitignore" => unindent(<<-FILE),
    /tmp
    
  FILE
  
  "Gemfile" => unindent(<<-FILE),
    source 'https://rubygems.org'
  
    gem 'iron_chef'
    
  FILE
  
  "Capfile" => unindent(<<-FILE),
    # load 'deploy' # default capistrano tasks for app deployment
    require 'iron_chef'
    load 'config/deploy'
  
  FILE
  
  "config/deploy.rb" => unindent(<<-FILE),
    require 'capistrano/ext/multistage'
    
    
    set :default_chef_attributes, false
    # don't forget to run locally -> ssh-add xxxxx_keypair_ec2.pem
    ssh_options[:keys] = File.expand_path('your-local-path-to-ssh-key/xxxxx_keypair_ec2.pem')
    default_run_options[:pty] = true
    set :user, 'xxxx-username-in-ec2-xxxx'
    set :use_sudo, false
    
    
  FILE
  
  "config/deploy/staging.rb" => unindent(<<-FILE),
  # anything that's 
  
  FILE
  
  "config/deploy/production.rb" => unindent(<<-FILE),
  #role :web, "ec2-XXX-XXX-XXX-XXX.compute-1.amazonaws.com"
  #role :app, "ec2-XXX-XXX-XXX-XXX.compute-1.amazonaws.com"
  #role :db, "ec2-XXX-XXX-XXX-XXX.compute-1.amazonaws.com" , :primary => true
  #role :db, "your slave db-server here"
  
  FILE
  
  "data_bags/.gitkeep" => '',
  "nodes/.gitkeep" => '',
  "roles/.gitkeep" => '',
  "cookbooks/.gitkeep" => '',
  "site-cookbooks/.gitkeep" => '',
  "README.md" => "<%= base %>"
}

FileUtils.mkdir_p(base)

files.each do |file, content|
  file = File.join(base, file)
  if File.exists?(file)
    warn "[skip] '#{file}' already exists"
  elsif File.exists?(file.downcase)
    warn "[skip] '#{file.downcase}' exists, which could conflict with `#{file}'"
  else
    unless File.exists?(File.dirname(file))
      puts "[add] making directory '#{File.dirname(file)}'"
      FileUtils.mkdir(File.dirname(file))
    end
    puts "[add] writing '#{file}'"
    File.open(file, "w") { |f| f.write(content) }
  end
end

Dir.chdir(base) do
  puts   'Installing gem dependencies'
  system 'bundle'
  
  puts "Created Iron Chef devops project '#{base}'"
end
